on:
  push:
    branches:
      - master
    tags:
      - 'v*'

name: Create release and build artifacts

jobs:
  Make_GitHub_Release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.step_version.outputs.version }}
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Version from version.h
        id: extract_version
        run: |
          version=$(grep -oP '#define APP_VERSION\s+"\K[^"]+' src/version.h)
          echo "::set-output name=version::$version"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Set version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF:10}

      - name: Extract Upload URL
        id: extract_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  deploy:
    needs: [Make_GitHub_Release]
    name: Upload artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows_build

      - name: Download Ubuntu-22 build artifacts
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-22_build

      - name: Download Ubuntu-20 build artifacts
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-20_build

      - name: Download MacOS build artifacts
        uses: actions/download-artifact@v1
        with:
          name: macos_build

      - name: Upload Windows build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Make_GitHub_Release.outputs.upload_url }}
          asset_path: windows_build/windows_build.zip
          asset_name: xmrig-${{ steps.version.outputs.VERSION }}-win64.zip
          asset_content_type: application/zip

      - name: Upload Ubuntu-22 build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Make_GitHub_Release.outputs.upload_url }}
          asset_path: ubuntu-22_build/ubuntu-22_build.tar.gz
          asset_name: xmrig-${{ steps.version.outputs.VERSION }}-ubuntu-22.tar.gz
          asset_content_type: application/zip

      - name: Upload Ubuntu-20 build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Make_GitHub_Release.outputs.upload_url }}
          asset_path: ubuntu-20_build/ubuntu-20_build.tar.gz
          asset_name: xmrig-${{ steps.version.outputs.VERSION }}-ubuntu-20.tar.gz
          asset_content_type: application/zip

      - name: Upload MacOS build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Make_GitHub_Release.outputs.upload_url }}
          asset_path: macos_build/macos_build.tar.gz
          asset_name: xmrig-${{ steps.version.outputs.VERSION }}-macos.tar.gz
          asset_content_type: application/zip

      - name: Update hiveos repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/SolFly/hiveos.git
          cd hiveos
          git config user.name  SolFly
          git config user.email SolFly86@gmail.com
          mv xmrig mo_xmrig/xmrig
          mv config.json mo_xmrig/config_global.json
          export VER=${GITHUB_REF:10}
          export VER=${VER//-/_}
          tar -zcvf mo_xmrig-$VER.tar.gz mo_xmrig
          git add mo_xmrig-$VER.tar.gz mo_xmrig/xmrig mo_xmrig/config_global.json
          git commit -m "xmrig "${GITHUB_REF:10}" based release" mo_xmrig-$VER.tar.gz
          git push

name: Create release and build artifacts

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

env:
  BUILD_DEPS: https://github.com/xmrig/xmrig-deps.git
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-2019
            artifact_name: windows_build
            asset_name: xmrig-${{steps.version.outputs.VERSION}}-win64.zip
            asset_path: windows_build/windows_build.zip
            build_steps: |
              cmake . -G "MinGW Makefiles" -DXMRIG_DEPS=xmrig-deps\gcc\x64
              make -j2
              copy src\config.json .
              copy bin\WinRing0\WinRing0x64.sys .
              7z a -tzip -mx windows_build.zip xmrig.exe config.json WinRing0x64.sys
          - os: ubuntu-22.04
            artifact_name: ubuntu_build
            asset_name: xmrig-${{steps.version.outputs.VERSION}}-lin64.tar.gz
            asset_path: ubuntu_build/ubuntu_build.tar.gz
            build_steps: |
              cmake .
              make -j$(nproc)
              cp src/config.json .
              tar cfz ubuntu_build.tar.gz xmrig config.json
          - os: macos-latest
            artifact_name: macos_build
            asset_name: xmrig-${{steps.version.outputs.VERSION}}-mac64.tar.gz
            asset_path: macos_build/macos_build.tar.gz
            build_steps: |
              cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DHWLOC_INCLUDE_DIR=hwloc-2.1.0/include -DHWLOC_LIBRARY=hwloc-2.1.0/hwloc/.libs/libhwloc.a
              make -j$(sysctl -n hw.logicalcpu)
              cp src/config.json .
              tar cfz macos_build.tar.gz xmrig config.json
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Checkout deps
        run: git clone ${{ env.BUILD_DEPS }}
      - name: Build project
        run: ${{ matrix.build_steps }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_path }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Set version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
      - name: Upload build release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/zip
      
      - name: Update xmrig_setup repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/SolFly/xmrig_setup.git
          cd xmrig_setup
          git config user.name  SolFly
          git config user.email info@fastpool.info
          cp ../windows_build/windows_build.zip xmrig.zip
          unzip xmrig.zip
          zip -u offline_miner_setup.zip xmrig.exe config.json WinRing0x64.sys
          git commit -m "xmrig ${GITHUB_REF#refs/tags/} based release" xmrig.tar.gz xmrig.zip offline_miner_setup.zip
          git push
          cd ..
      
      - name: Update hiveos repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/SolFly/hiveos.git
          cd hiveos
          git config user.name  SolFly
          git config user.email info@fastpool.info
          mv xmrig mo_xmrig/xmrig
          mv config.json mo_xmrig/config_global.json
          export VER=${GITHUB_REF#refs/tags/}
          export VER=${VER//-/_}
          tar -zcvf mo_xmrig-$VER.tar.gz mo_xmrig
          git add mo_xmrig-$VER.tar.gz mo_xmrig/xmrig mo_xmrig/config_global.json
          git commit -m "xmrig ${GITHUB_REF#refs/tags/} based release" mo_xmrig-$VER.tar.gz
          git push

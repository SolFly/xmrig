on:
  push:
    branches:
      - master
  tags:
    - 'v*'

name: Create Release and Build Artifacts

jobs:
  build_win:
    name: Build Windows artifacts
    runs-on: windows-latest  # Switched to windows-latest for wider compatibility
    steps:
      - uses: actions/checkout@v2
      - name: Checkout deps
        run: git clone https://github.com/xmrig/xmrig-deps.git
      - name: Build project on Windows
        run: |
          cmake . -G "MinGW Makefiles" -DXMRIG_DEPS=xmrig-deps\gcc\x64
          make -j2
          copy src\config.json .
          copy bin\WinRing0\WinRing0x64.sys .
          7z a -tzip -mx windows_build.zip xmrig.exe config.json WinRing0x64.sys
      - uses: actions/upload-artifact@v2
        with:
          name: windows_build
          path: windows_build.zip

  build_lin:
    name: Build Ubuntu artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - uses: actions/checkout@v2
      - name: Build project on Ubuntu
        run: |
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu_build.tar.gz xmrig config.json
      - uses: actions/upload-artifact@v2
        with:
          name: ubuntu_build
          path: ubuntu_build.tar.gz

  build_macos:
    name: Build MacOS artifacts
    runs-on: macos-latest
    steps:
      - name: Prepare MacOS tools
        run: brew install cmake libuv openssl hwloc  # Removed unnecessary space
      - uses: actions/checkout@v2
      - name: Build project on MacOS (using pre-built hwloc)
        # Removed manual hwloc build step and referenced system library
        run: |
          cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DHWLOC_INCLUDE_DIR=/usr/local/opt/hwloc/include -DHWLOC_LIBRARY=/usr/local/opt/hwloc/lib/libhwloc.dylib
          make -j$(sysctl -n hw.logicalcpu)
          cp src/config.json .
          tar cfz macos_build.tar.gz xmrig config.json
      - uses: actions/upload-artifact@v2
        with:
          name: macos_build
          path: macos_build.tar.gz

  deploy:
    needs: [build_win, build_lin, build_macos]
    name: Create release and upload artifacts
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
      
      - uses: actions/download-artifact@v2
        with:
          name: windows_build
      
      - uses: actions/download-artifact@v2
        with:
          name: ubuntu_build
      
      - uses: actions/download-artifact@v2
        with:
          name: macos_build
      
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: <span class="math-inline">\{\{ steps\.create\_release\.outputs\.upload\_url</3\> \}\}
asset\_path\: windows\_build/windows\_build\.zip
asset\_name\: xmrig\-</span>{{steps.version.outputs.VERSION}}-win64.zip
          asset_content_
      
      - name: Update xmrig_setup repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/SolFly/xmrig_setup.git
          cd xmrig_setup
          git config user.name  SolFly
          git config user.email info@fastpool.info
          cp ../windows_build/windows_build.zip xmrig.zip
          unzip xmrig.zip
          zip -u offline_miner_setup.zip xmrig.exe config.json WinRing0x64.sys
          git commit -m "xmrig ${GITHUB_REF#refs/tags/} based release" xmrig.tar.gz xmrig.zip offline_miner_setup.zip
          git push
          cd ..
      
      - name: Update hiveos repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/SolFly/hiveos.git
          cd hiveos
          git config user.name  SolFly
          git config user.email info@fastpool.info
          mv xmrig mo_xmrig/xmrig
          mv config.json mo_xmrig/config_global.json
          export VER=${GITHUB_REF#refs/tags/}
          export VER=${VER//-/_}
          tar -zcvf mo_xmrig-$VER.tar.gz mo_xmrig
          git add mo_xmrig-$VER.tar.gz mo_xmrig/xmrig mo_xmrig/config_global.json
          git commit -m "xmrig ${GITHUB_REF#refs/tags/} based release" mo_xmrig-$VER.tar.gz
          git push
